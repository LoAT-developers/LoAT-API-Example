
// Generated from CINT.g4 by ANTLR 4.11.1


#include "CINTLexer.h"


using namespace antlr4;



using namespace antlr4;

namespace {

struct CINTLexerStaticData final {
  CINTLexerStaticData(std::vector<std::string> ruleNames,
                          std::vector<std::string> channelNames,
                          std::vector<std::string> modeNames,
                          std::vector<std::string> literalNames,
                          std::vector<std::string> symbolicNames)
      : ruleNames(std::move(ruleNames)), channelNames(std::move(channelNames)),
        modeNames(std::move(modeNames)), literalNames(std::move(literalNames)),
        symbolicNames(std::move(symbolicNames)),
        vocabulary(this->literalNames, this->symbolicNames) {}

  CINTLexerStaticData(const CINTLexerStaticData&) = delete;
  CINTLexerStaticData(CINTLexerStaticData&&) = delete;
  CINTLexerStaticData& operator=(const CINTLexerStaticData&) = delete;
  CINTLexerStaticData& operator=(CINTLexerStaticData&&) = delete;

  std::vector<antlr4::dfa::DFA> decisionToDFA;
  antlr4::atn::PredictionContextCache sharedContextCache;
  const std::vector<std::string> ruleNames;
  const std::vector<std::string> channelNames;
  const std::vector<std::string> modeNames;
  const std::vector<std::string> literalNames;
  const std::vector<std::string> symbolicNames;
  const antlr4::dfa::Vocabulary vocabulary;
  antlr4::atn::SerializedATNView serializedATN;
  std::unique_ptr<antlr4::atn::ATN> atn;
};

::antlr4::internal::OnceFlag cintlexerLexerOnceFlag;
CINTLexerStaticData *cintlexerLexerStaticData = nullptr;

void cintlexerLexerInitialize() {
  assert(cintlexerLexerStaticData == nullptr);
  auto staticData = std::make_unique<CINTLexerStaticData>(
    std::vector<std::string>{
      "INT", "IF", "WHILE", "ELSE", "ASSERT", "TERMINATOR", "OPENP", "CLOSEP", 
      "OPENC", "CLOSEC", "MULT", "MINUS", "PLUS", "LT", "LEQ", "EQ", "NEQ", 
      "GEQ", "GT", "ASSIGN", "NONDETNAME", "OR", "AND", "NOT", "TRUE", "FALSE", 
      "TYPEDEF", "ENUM", "COMMA", "BOOL", "EXTERN", "VOID", "MAIN", "RETURN", 
      "ZERO", "POS", "NONZERO", "DIGIT", "V", "ALPHANUM", "CHAR", "LOW", 
      "UP", "W", "BLOCKCOMMENT", "LINECOMMENT"
    },
    std::vector<std::string>{
      "DEFAULT_TOKEN_CHANNEL", "HIDDEN"
    },
    std::vector<std::string>{
      "DEFAULT_MODE"
    },
    std::vector<std::string>{
      "", "'int'", "'if'", "'while'", "'else'", "'assert'", "';'", "'('", 
      "')'", "'{'", "'}'", "'*'", "'-'", "'+'", "'<'", "'<='", "'=='", "'!='", 
      "'>='", "'>'", "'='", "'__VERIFIER_nondet_int'", "'||'", "'&&'", "'!'", 
      "'true'", "'false'", "'typedef'", "'enum'", "','", "'bool'", "'extern'", 
      "'void'", "'main'", "'return'", "'0'"
    },
    std::vector<std::string>{
      "", "INT", "IF", "WHILE", "ELSE", "ASSERT", "TERMINATOR", "OPENP", 
      "CLOSEP", "OPENC", "CLOSEC", "MULT", "MINUS", "PLUS", "LT", "LEQ", 
      "EQ", "NEQ", "GEQ", "GT", "ASSIGN", "NONDETNAME", "OR", "AND", "NOT", 
      "TRUE", "FALSE", "TYPEDEF", "ENUM", "COMMA", "BOOL", "EXTERN", "VOID", 
      "MAIN", "RETURN", "ZERO", "POS", "V", "W", "BLOCKCOMMENT", "LINECOMMENT"
    }
  );
  static const int32_t serializedATNSegment[] = {
  	4,0,40,303,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
  	6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
  	7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
  	7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
  	7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,
  	7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,
  	7,42,2,43,7,43,2,44,7,44,2,45,7,45,1,0,1,0,1,0,1,0,1,1,1,1,1,1,1,2,1,
  	2,1,2,1,2,1,2,1,2,1,3,1,3,1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,5,
  	1,5,1,6,1,6,1,7,1,7,1,8,1,8,1,9,1,9,1,10,1,10,1,11,1,11,1,12,1,12,1,13,
  	1,13,1,14,1,14,1,14,1,15,1,15,1,15,1,16,1,16,1,16,1,17,1,17,1,17,1,18,
  	1,18,1,19,1,19,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,
  	1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,21,1,21,1,21,
  	1,22,1,22,1,22,1,23,1,23,1,24,1,24,1,24,1,24,1,24,1,25,1,25,1,25,1,25,
  	1,25,1,25,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,27,1,27,1,27,1,27,
  	1,27,1,28,1,28,1,29,1,29,1,29,1,29,1,29,1,30,1,30,1,30,1,30,1,30,1,30,
  	1,30,1,31,1,31,1,31,1,31,1,31,1,32,1,32,1,32,1,32,1,32,1,33,1,33,1,33,
  	1,33,1,33,1,33,1,33,1,34,1,34,1,35,1,35,5,35,242,8,35,10,35,12,35,245,
  	9,35,1,36,1,36,1,37,1,37,3,37,251,8,37,1,38,1,38,5,38,255,8,38,10,38,
  	12,38,258,9,38,1,39,1,39,3,39,262,8,39,1,40,1,40,3,40,266,8,40,1,41,1,
  	41,1,42,1,42,1,43,4,43,273,8,43,11,43,12,43,274,1,43,1,43,1,44,1,44,1,
  	44,1,44,5,44,283,8,44,10,44,12,44,286,9,44,1,44,1,44,1,44,1,44,1,44,1,
  	45,1,45,1,45,1,45,5,45,297,8,45,10,45,12,45,300,9,45,1,45,1,45,1,284,
  	0,46,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,
  	27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,24,49,
  	25,51,26,53,27,55,28,57,29,59,30,61,31,63,32,65,33,67,34,69,35,71,36,
  	73,0,75,0,77,37,79,0,81,0,83,0,85,0,87,38,89,39,91,40,1,0,2,3,0,9,10,
  	13,13,32,32,2,0,10,10,13,13,304,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,
  	7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,
  	0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,
  	0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,
  	1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,
  	0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,
  	0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,
  	1,0,0,0,0,77,1,0,0,0,0,87,1,0,0,0,0,89,1,0,0,0,0,91,1,0,0,0,1,93,1,0,
  	0,0,3,97,1,0,0,0,5,100,1,0,0,0,7,106,1,0,0,0,9,111,1,0,0,0,11,118,1,0,
  	0,0,13,120,1,0,0,0,15,122,1,0,0,0,17,124,1,0,0,0,19,126,1,0,0,0,21,128,
  	1,0,0,0,23,130,1,0,0,0,25,132,1,0,0,0,27,134,1,0,0,0,29,136,1,0,0,0,31,
  	139,1,0,0,0,33,142,1,0,0,0,35,145,1,0,0,0,37,148,1,0,0,0,39,150,1,0,0,
  	0,41,152,1,0,0,0,43,174,1,0,0,0,45,177,1,0,0,0,47,180,1,0,0,0,49,182,
  	1,0,0,0,51,187,1,0,0,0,53,193,1,0,0,0,55,201,1,0,0,0,57,206,1,0,0,0,59,
  	208,1,0,0,0,61,213,1,0,0,0,63,220,1,0,0,0,65,225,1,0,0,0,67,230,1,0,0,
  	0,69,237,1,0,0,0,71,239,1,0,0,0,73,246,1,0,0,0,75,250,1,0,0,0,77,252,
  	1,0,0,0,79,261,1,0,0,0,81,265,1,0,0,0,83,267,1,0,0,0,85,269,1,0,0,0,87,
  	272,1,0,0,0,89,278,1,0,0,0,91,292,1,0,0,0,93,94,5,105,0,0,94,95,5,110,
  	0,0,95,96,5,116,0,0,96,2,1,0,0,0,97,98,5,105,0,0,98,99,5,102,0,0,99,4,
  	1,0,0,0,100,101,5,119,0,0,101,102,5,104,0,0,102,103,5,105,0,0,103,104,
  	5,108,0,0,104,105,5,101,0,0,105,6,1,0,0,0,106,107,5,101,0,0,107,108,5,
  	108,0,0,108,109,5,115,0,0,109,110,5,101,0,0,110,8,1,0,0,0,111,112,5,97,
  	0,0,112,113,5,115,0,0,113,114,5,115,0,0,114,115,5,101,0,0,115,116,5,114,
  	0,0,116,117,5,116,0,0,117,10,1,0,0,0,118,119,5,59,0,0,119,12,1,0,0,0,
  	120,121,5,40,0,0,121,14,1,0,0,0,122,123,5,41,0,0,123,16,1,0,0,0,124,125,
  	5,123,0,0,125,18,1,0,0,0,126,127,5,125,0,0,127,20,1,0,0,0,128,129,5,42,
  	0,0,129,22,1,0,0,0,130,131,5,45,0,0,131,24,1,0,0,0,132,133,5,43,0,0,133,
  	26,1,0,0,0,134,135,5,60,0,0,135,28,1,0,0,0,136,137,5,60,0,0,137,138,5,
  	61,0,0,138,30,1,0,0,0,139,140,5,61,0,0,140,141,5,61,0,0,141,32,1,0,0,
  	0,142,143,5,33,0,0,143,144,5,61,0,0,144,34,1,0,0,0,145,146,5,62,0,0,146,
  	147,5,61,0,0,147,36,1,0,0,0,148,149,5,62,0,0,149,38,1,0,0,0,150,151,5,
  	61,0,0,151,40,1,0,0,0,152,153,5,95,0,0,153,154,5,95,0,0,154,155,5,86,
  	0,0,155,156,5,69,0,0,156,157,5,82,0,0,157,158,5,73,0,0,158,159,5,70,0,
  	0,159,160,5,73,0,0,160,161,5,69,0,0,161,162,5,82,0,0,162,163,5,95,0,0,
  	163,164,5,110,0,0,164,165,5,111,0,0,165,166,5,110,0,0,166,167,5,100,0,
  	0,167,168,5,101,0,0,168,169,5,116,0,0,169,170,5,95,0,0,170,171,5,105,
  	0,0,171,172,5,110,0,0,172,173,5,116,0,0,173,42,1,0,0,0,174,175,5,124,
  	0,0,175,176,5,124,0,0,176,44,1,0,0,0,177,178,5,38,0,0,178,179,5,38,0,
  	0,179,46,1,0,0,0,180,181,5,33,0,0,181,48,1,0,0,0,182,183,5,116,0,0,183,
  	184,5,114,0,0,184,185,5,117,0,0,185,186,5,101,0,0,186,50,1,0,0,0,187,
  	188,5,102,0,0,188,189,5,97,0,0,189,190,5,108,0,0,190,191,5,115,0,0,191,
  	192,5,101,0,0,192,52,1,0,0,0,193,194,5,116,0,0,194,195,5,121,0,0,195,
  	196,5,112,0,0,196,197,5,101,0,0,197,198,5,100,0,0,198,199,5,101,0,0,199,
  	200,5,102,0,0,200,54,1,0,0,0,201,202,5,101,0,0,202,203,5,110,0,0,203,
  	204,5,117,0,0,204,205,5,109,0,0,205,56,1,0,0,0,206,207,5,44,0,0,207,58,
  	1,0,0,0,208,209,5,98,0,0,209,210,5,111,0,0,210,211,5,111,0,0,211,212,
  	5,108,0,0,212,60,1,0,0,0,213,214,5,101,0,0,214,215,5,120,0,0,215,216,
  	5,116,0,0,216,217,5,101,0,0,217,218,5,114,0,0,218,219,5,110,0,0,219,62,
  	1,0,0,0,220,221,5,118,0,0,221,222,5,111,0,0,222,223,5,105,0,0,223,224,
  	5,100,0,0,224,64,1,0,0,0,225,226,5,109,0,0,226,227,5,97,0,0,227,228,5,
  	105,0,0,228,229,5,110,0,0,229,66,1,0,0,0,230,231,5,114,0,0,231,232,5,
  	101,0,0,232,233,5,116,0,0,233,234,5,117,0,0,234,235,5,114,0,0,235,236,
  	5,110,0,0,236,68,1,0,0,0,237,238,5,48,0,0,238,70,1,0,0,0,239,243,3,73,
  	36,0,240,242,3,75,37,0,241,240,1,0,0,0,242,245,1,0,0,0,243,241,1,0,0,
  	0,243,244,1,0,0,0,244,72,1,0,0,0,245,243,1,0,0,0,246,247,2,49,57,0,247,
  	74,1,0,0,0,248,251,3,69,34,0,249,251,3,73,36,0,250,248,1,0,0,0,250,249,
  	1,0,0,0,251,76,1,0,0,0,252,256,3,81,40,0,253,255,3,79,39,0,254,253,1,
  	0,0,0,255,258,1,0,0,0,256,254,1,0,0,0,256,257,1,0,0,0,257,78,1,0,0,0,
  	258,256,1,0,0,0,259,262,3,81,40,0,260,262,3,75,37,0,261,259,1,0,0,0,261,
  	260,1,0,0,0,262,80,1,0,0,0,263,266,3,83,41,0,264,266,3,85,42,0,265,263,
  	1,0,0,0,265,264,1,0,0,0,266,82,1,0,0,0,267,268,2,97,122,0,268,84,1,0,
  	0,0,269,270,2,65,90,0,270,86,1,0,0,0,271,273,7,0,0,0,272,271,1,0,0,0,
  	273,274,1,0,0,0,274,272,1,0,0,0,274,275,1,0,0,0,275,276,1,0,0,0,276,277,
  	6,43,0,0,277,88,1,0,0,0,278,279,5,47,0,0,279,280,5,42,0,0,280,284,1,0,
  	0,0,281,283,9,0,0,0,282,281,1,0,0,0,283,286,1,0,0,0,284,285,1,0,0,0,284,
  	282,1,0,0,0,285,287,1,0,0,0,286,284,1,0,0,0,287,288,5,42,0,0,288,289,
  	5,47,0,0,289,290,1,0,0,0,290,291,6,44,0,0,291,90,1,0,0,0,292,293,5,47,
  	0,0,293,294,5,47,0,0,294,298,1,0,0,0,295,297,8,1,0,0,296,295,1,0,0,0,
  	297,300,1,0,0,0,298,296,1,0,0,0,298,299,1,0,0,0,299,301,1,0,0,0,300,298,
  	1,0,0,0,301,302,6,45,0,0,302,92,1,0,0,0,9,0,243,250,256,261,265,274,284,
  	298,1,6,0,0
  };
  staticData->serializedATN = antlr4::atn::SerializedATNView(serializedATNSegment, sizeof(serializedATNSegment) / sizeof(serializedATNSegment[0]));

  antlr4::atn::ATNDeserializer deserializer;
  staticData->atn = deserializer.deserialize(staticData->serializedATN);

  const size_t count = staticData->atn->getNumberOfDecisions();
  staticData->decisionToDFA.reserve(count);
  for (size_t i = 0; i < count; i++) { 
    staticData->decisionToDFA.emplace_back(staticData->atn->getDecisionState(i), i);
  }
  cintlexerLexerStaticData = staticData.release();
}

}

CINTLexer::CINTLexer(CharStream *input) : Lexer(input) {
  CINTLexer::initialize();
  _interpreter = new atn::LexerATNSimulator(this, *cintlexerLexerStaticData->atn, cintlexerLexerStaticData->decisionToDFA, cintlexerLexerStaticData->sharedContextCache);
}

CINTLexer::~CINTLexer() {
  delete _interpreter;
}

std::string CINTLexer::getGrammarFileName() const {
  return "CINT.g4";
}

const std::vector<std::string>& CINTLexer::getRuleNames() const {
  return cintlexerLexerStaticData->ruleNames;
}

const std::vector<std::string>& CINTLexer::getChannelNames() const {
  return cintlexerLexerStaticData->channelNames;
}

const std::vector<std::string>& CINTLexer::getModeNames() const {
  return cintlexerLexerStaticData->modeNames;
}

const dfa::Vocabulary& CINTLexer::getVocabulary() const {
  return cintlexerLexerStaticData->vocabulary;
}

antlr4::atn::SerializedATNView CINTLexer::getSerializedATN() const {
  return cintlexerLexerStaticData->serializedATN;
}

const atn::ATN& CINTLexer::getATN() const {
  return *cintlexerLexerStaticData->atn;
}




void CINTLexer::initialize() {
  ::antlr4::internal::call_once(cintlexerLexerOnceFlag, cintlexerLexerInitialize);
}
