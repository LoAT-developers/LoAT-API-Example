
// Generated from CINT.g4 by ANTLR 4.11.1


#include "CINTLexer.h"


using namespace antlr4;



using namespace antlr4;

namespace {

struct CINTLexerStaticData final {
  CINTLexerStaticData(std::vector<std::string> ruleNames,
                          std::vector<std::string> channelNames,
                          std::vector<std::string> modeNames,
                          std::vector<std::string> literalNames,
                          std::vector<std::string> symbolicNames)
      : ruleNames(std::move(ruleNames)), channelNames(std::move(channelNames)),
        modeNames(std::move(modeNames)), literalNames(std::move(literalNames)),
        symbolicNames(std::move(symbolicNames)),
        vocabulary(this->literalNames, this->symbolicNames) {}

  CINTLexerStaticData(const CINTLexerStaticData&) = delete;
  CINTLexerStaticData(CINTLexerStaticData&&) = delete;
  CINTLexerStaticData& operator=(const CINTLexerStaticData&) = delete;
  CINTLexerStaticData& operator=(CINTLexerStaticData&&) = delete;

  std::vector<antlr4::dfa::DFA> decisionToDFA;
  antlr4::atn::PredictionContextCache sharedContextCache;
  const std::vector<std::string> ruleNames;
  const std::vector<std::string> channelNames;
  const std::vector<std::string> modeNames;
  const std::vector<std::string> literalNames;
  const std::vector<std::string> symbolicNames;
  const antlr4::dfa::Vocabulary vocabulary;
  antlr4::atn::SerializedATNView serializedATN;
  std::unique_ptr<antlr4::atn::ATN> atn;
};

::antlr4::internal::OnceFlag cintlexerLexerOnceFlag;
CINTLexerStaticData *cintlexerLexerStaticData = nullptr;

void cintlexerLexerInitialize() {
  assert(cintlexerLexerStaticData == nullptr);
  auto staticData = std::make_unique<CINTLexerStaticData>(
    std::vector<std::string>{
      "INT", "IF", "WHILE", "ELSE", "TERMINATOR", "OPENP", "CLOSEP", "OPENC", 
      "CLOSEC", "MULT", "MINUS", "PLUS", "LT", "LEQ", "EQ", "NEQ", "GEQ", 
      "GT", "ASSIGN", "NONDETNAME", "OR", "AND", "NOT", "TRUE", "FALSE", 
      "TYPEDEF", "ENUM", "COMMA", "BOOL", "EXTERN", "VOID", "MAIN", "RETURN", 
      "ZERO", "POS", "NONZERO", "DIGIT", "V", "ALPHANUM", "CHAR", "LOW", 
      "UP", "W", "BLOCKCOMMENT", "LINECOMMENT", "ASSERT"
    },
    std::vector<std::string>{
      "DEFAULT_TOKEN_CHANNEL", "HIDDEN"
    },
    std::vector<std::string>{
      "DEFAULT_MODE"
    },
    std::vector<std::string>{
      "", "'int'", "'if'", "'while'", "'else'", "';'", "'('", "')'", "'{'", 
      "'}'", "'*'", "'-'", "'+'", "'<'", "'<='", "'=='", "'!='", "'>='", 
      "'>'", "'='", "'__VERIFIER_nondet_int'", "'||'", "'&&'", "'!'", "'true'", 
      "'false'", "'typedef'", "'enum'", "','", "'bool'", "'extern'", "'void'", 
      "'main'", "'return'", "'0'", "", "", "", "", "", "'assert'"
    },
    std::vector<std::string>{
      "", "INT", "IF", "WHILE", "ELSE", "TERMINATOR", "OPENP", "CLOSEP", 
      "OPENC", "CLOSEC", "MULT", "MINUS", "PLUS", "LT", "LEQ", "EQ", "NEQ", 
      "GEQ", "GT", "ASSIGN", "NONDETNAME", "OR", "AND", "NOT", "TRUE", "FALSE", 
      "TYPEDEF", "ENUM", "COMMA", "BOOL", "EXTERN", "VOID", "MAIN", "RETURN", 
      "ZERO", "POS", "V", "W", "BLOCKCOMMENT", "LINECOMMENT", "ASSERT"
    }
  );
  static const int32_t serializedATNSegment[] = {
  	4,0,40,303,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
  	6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
  	7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
  	7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
  	7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,
  	7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,
  	7,42,2,43,7,43,2,44,7,44,2,45,7,45,1,0,1,0,1,0,1,0,1,1,1,1,1,1,1,2,1,
  	2,1,2,1,2,1,2,1,2,1,3,1,3,1,3,1,3,1,3,1,4,1,4,1,5,1,5,1,6,1,6,1,7,1,7,
  	1,8,1,8,1,9,1,9,1,10,1,10,1,11,1,11,1,12,1,12,1,13,1,13,1,13,1,14,1,14,
  	1,14,1,15,1,15,1,15,1,16,1,16,1,16,1,17,1,17,1,18,1,18,1,19,1,19,1,19,
  	1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,
  	1,19,1,19,1,19,1,19,1,19,1,20,1,20,1,20,1,21,1,21,1,21,1,22,1,22,1,23,
  	1,23,1,23,1,23,1,23,1,24,1,24,1,24,1,24,1,24,1,24,1,25,1,25,1,25,1,25,
  	1,25,1,25,1,25,1,25,1,26,1,26,1,26,1,26,1,26,1,27,1,27,1,28,1,28,1,28,
  	1,28,1,28,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,30,1,30,1,30,1,30,1,30,
  	1,31,1,31,1,31,1,31,1,31,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,33,1,33,
  	1,34,1,34,5,34,235,8,34,10,34,12,34,238,9,34,1,35,1,35,1,36,1,36,3,36,
  	244,8,36,1,37,1,37,5,37,248,8,37,10,37,12,37,251,9,37,1,38,1,38,3,38,
  	255,8,38,1,39,1,39,3,39,259,8,39,1,40,1,40,1,41,1,41,1,42,4,42,266,8,
  	42,11,42,12,42,267,1,42,1,42,1,43,1,43,1,43,1,43,5,43,276,8,43,10,43,
  	12,43,279,9,43,1,43,1,43,1,43,1,43,1,43,1,44,1,44,1,44,1,44,5,44,290,
  	8,44,10,44,12,44,293,9,44,1,44,1,44,1,45,1,45,1,45,1,45,1,45,1,45,1,45,
  	1,277,0,46,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,
  	25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,
  	24,49,25,51,26,53,27,55,28,57,29,59,30,61,31,63,32,65,33,67,34,69,35,
  	71,0,73,0,75,36,77,0,79,0,81,0,83,0,85,37,87,38,89,39,91,40,1,0,2,3,0,
  	9,10,13,13,32,32,2,0,10,10,13,13,304,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,
  	0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,
  	17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,
  	0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,
  	0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,
  	49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,
  	0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,
  	0,0,75,1,0,0,0,0,85,1,0,0,0,0,87,1,0,0,0,0,89,1,0,0,0,0,91,1,0,0,0,1,
  	93,1,0,0,0,3,97,1,0,0,0,5,100,1,0,0,0,7,106,1,0,0,0,9,111,1,0,0,0,11,
  	113,1,0,0,0,13,115,1,0,0,0,15,117,1,0,0,0,17,119,1,0,0,0,19,121,1,0,0,
  	0,21,123,1,0,0,0,23,125,1,0,0,0,25,127,1,0,0,0,27,129,1,0,0,0,29,132,
  	1,0,0,0,31,135,1,0,0,0,33,138,1,0,0,0,35,141,1,0,0,0,37,143,1,0,0,0,39,
  	145,1,0,0,0,41,167,1,0,0,0,43,170,1,0,0,0,45,173,1,0,0,0,47,175,1,0,0,
  	0,49,180,1,0,0,0,51,186,1,0,0,0,53,194,1,0,0,0,55,199,1,0,0,0,57,201,
  	1,0,0,0,59,206,1,0,0,0,61,213,1,0,0,0,63,218,1,0,0,0,65,223,1,0,0,0,67,
  	230,1,0,0,0,69,232,1,0,0,0,71,239,1,0,0,0,73,243,1,0,0,0,75,245,1,0,0,
  	0,77,254,1,0,0,0,79,258,1,0,0,0,81,260,1,0,0,0,83,262,1,0,0,0,85,265,
  	1,0,0,0,87,271,1,0,0,0,89,285,1,0,0,0,91,296,1,0,0,0,93,94,5,105,0,0,
  	94,95,5,110,0,0,95,96,5,116,0,0,96,2,1,0,0,0,97,98,5,105,0,0,98,99,5,
  	102,0,0,99,4,1,0,0,0,100,101,5,119,0,0,101,102,5,104,0,0,102,103,5,105,
  	0,0,103,104,5,108,0,0,104,105,5,101,0,0,105,6,1,0,0,0,106,107,5,101,0,
  	0,107,108,5,108,0,0,108,109,5,115,0,0,109,110,5,101,0,0,110,8,1,0,0,0,
  	111,112,5,59,0,0,112,10,1,0,0,0,113,114,5,40,0,0,114,12,1,0,0,0,115,116,
  	5,41,0,0,116,14,1,0,0,0,117,118,5,123,0,0,118,16,1,0,0,0,119,120,5,125,
  	0,0,120,18,1,0,0,0,121,122,5,42,0,0,122,20,1,0,0,0,123,124,5,45,0,0,124,
  	22,1,0,0,0,125,126,5,43,0,0,126,24,1,0,0,0,127,128,5,60,0,0,128,26,1,
  	0,0,0,129,130,5,60,0,0,130,131,5,61,0,0,131,28,1,0,0,0,132,133,5,61,0,
  	0,133,134,5,61,0,0,134,30,1,0,0,0,135,136,5,33,0,0,136,137,5,61,0,0,137,
  	32,1,0,0,0,138,139,5,62,0,0,139,140,5,61,0,0,140,34,1,0,0,0,141,142,5,
  	62,0,0,142,36,1,0,0,0,143,144,5,61,0,0,144,38,1,0,0,0,145,146,5,95,0,
  	0,146,147,5,95,0,0,147,148,5,86,0,0,148,149,5,69,0,0,149,150,5,82,0,0,
  	150,151,5,73,0,0,151,152,5,70,0,0,152,153,5,73,0,0,153,154,5,69,0,0,154,
  	155,5,82,0,0,155,156,5,95,0,0,156,157,5,110,0,0,157,158,5,111,0,0,158,
  	159,5,110,0,0,159,160,5,100,0,0,160,161,5,101,0,0,161,162,5,116,0,0,162,
  	163,5,95,0,0,163,164,5,105,0,0,164,165,5,110,0,0,165,166,5,116,0,0,166,
  	40,1,0,0,0,167,168,5,124,0,0,168,169,5,124,0,0,169,42,1,0,0,0,170,171,
  	5,38,0,0,171,172,5,38,0,0,172,44,1,0,0,0,173,174,5,33,0,0,174,46,1,0,
  	0,0,175,176,5,116,0,0,176,177,5,114,0,0,177,178,5,117,0,0,178,179,5,101,
  	0,0,179,48,1,0,0,0,180,181,5,102,0,0,181,182,5,97,0,0,182,183,5,108,0,
  	0,183,184,5,115,0,0,184,185,5,101,0,0,185,50,1,0,0,0,186,187,5,116,0,
  	0,187,188,5,121,0,0,188,189,5,112,0,0,189,190,5,101,0,0,190,191,5,100,
  	0,0,191,192,5,101,0,0,192,193,5,102,0,0,193,52,1,0,0,0,194,195,5,101,
  	0,0,195,196,5,110,0,0,196,197,5,117,0,0,197,198,5,109,0,0,198,54,1,0,
  	0,0,199,200,5,44,0,0,200,56,1,0,0,0,201,202,5,98,0,0,202,203,5,111,0,
  	0,203,204,5,111,0,0,204,205,5,108,0,0,205,58,1,0,0,0,206,207,5,101,0,
  	0,207,208,5,120,0,0,208,209,5,116,0,0,209,210,5,101,0,0,210,211,5,114,
  	0,0,211,212,5,110,0,0,212,60,1,0,0,0,213,214,5,118,0,0,214,215,5,111,
  	0,0,215,216,5,105,0,0,216,217,5,100,0,0,217,62,1,0,0,0,218,219,5,109,
  	0,0,219,220,5,97,0,0,220,221,5,105,0,0,221,222,5,110,0,0,222,64,1,0,0,
  	0,223,224,5,114,0,0,224,225,5,101,0,0,225,226,5,116,0,0,226,227,5,117,
  	0,0,227,228,5,114,0,0,228,229,5,110,0,0,229,66,1,0,0,0,230,231,5,48,0,
  	0,231,68,1,0,0,0,232,236,3,71,35,0,233,235,3,73,36,0,234,233,1,0,0,0,
  	235,238,1,0,0,0,236,234,1,0,0,0,236,237,1,0,0,0,237,70,1,0,0,0,238,236,
  	1,0,0,0,239,240,2,49,57,0,240,72,1,0,0,0,241,244,3,67,33,0,242,244,3,
  	71,35,0,243,241,1,0,0,0,243,242,1,0,0,0,244,74,1,0,0,0,245,249,3,79,39,
  	0,246,248,3,77,38,0,247,246,1,0,0,0,248,251,1,0,0,0,249,247,1,0,0,0,249,
  	250,1,0,0,0,250,76,1,0,0,0,251,249,1,0,0,0,252,255,3,79,39,0,253,255,
  	3,73,36,0,254,252,1,0,0,0,254,253,1,0,0,0,255,78,1,0,0,0,256,259,3,81,
  	40,0,257,259,3,83,41,0,258,256,1,0,0,0,258,257,1,0,0,0,259,80,1,0,0,0,
  	260,261,2,97,122,0,261,82,1,0,0,0,262,263,2,65,90,0,263,84,1,0,0,0,264,
  	266,7,0,0,0,265,264,1,0,0,0,266,267,1,0,0,0,267,265,1,0,0,0,267,268,1,
  	0,0,0,268,269,1,0,0,0,269,270,6,42,0,0,270,86,1,0,0,0,271,272,5,47,0,
  	0,272,273,5,42,0,0,273,277,1,0,0,0,274,276,9,0,0,0,275,274,1,0,0,0,276,
  	279,1,0,0,0,277,278,1,0,0,0,277,275,1,0,0,0,278,280,1,0,0,0,279,277,1,
  	0,0,0,280,281,5,42,0,0,281,282,5,47,0,0,282,283,1,0,0,0,283,284,6,43,
  	0,0,284,88,1,0,0,0,285,286,5,47,0,0,286,287,5,47,0,0,287,291,1,0,0,0,
  	288,290,8,1,0,0,289,288,1,0,0,0,290,293,1,0,0,0,291,289,1,0,0,0,291,292,
  	1,0,0,0,292,294,1,0,0,0,293,291,1,0,0,0,294,295,6,44,0,0,295,90,1,0,0,
  	0,296,297,5,97,0,0,297,298,5,115,0,0,298,299,5,115,0,0,299,300,5,101,
  	0,0,300,301,5,114,0,0,301,302,5,116,0,0,302,92,1,0,0,0,9,0,236,243,249,
  	254,258,267,277,291,1,6,0,0
  };
  staticData->serializedATN = antlr4::atn::SerializedATNView(serializedATNSegment, sizeof(serializedATNSegment) / sizeof(serializedATNSegment[0]));

  antlr4::atn::ATNDeserializer deserializer;
  staticData->atn = deserializer.deserialize(staticData->serializedATN);

  const size_t count = staticData->atn->getNumberOfDecisions();
  staticData->decisionToDFA.reserve(count);
  for (size_t i = 0; i < count; i++) { 
    staticData->decisionToDFA.emplace_back(staticData->atn->getDecisionState(i), i);
  }
  cintlexerLexerStaticData = staticData.release();
}

}

CINTLexer::CINTLexer(CharStream *input) : Lexer(input) {
  CINTLexer::initialize();
  _interpreter = new atn::LexerATNSimulator(this, *cintlexerLexerStaticData->atn, cintlexerLexerStaticData->decisionToDFA, cintlexerLexerStaticData->sharedContextCache);
}

CINTLexer::~CINTLexer() {
  delete _interpreter;
}

std::string CINTLexer::getGrammarFileName() const {
  return "CINT.g4";
}

const std::vector<std::string>& CINTLexer::getRuleNames() const {
  return cintlexerLexerStaticData->ruleNames;
}

const std::vector<std::string>& CINTLexer::getChannelNames() const {
  return cintlexerLexerStaticData->channelNames;
}

const std::vector<std::string>& CINTLexer::getModeNames() const {
  return cintlexerLexerStaticData->modeNames;
}

const dfa::Vocabulary& CINTLexer::getVocabulary() const {
  return cintlexerLexerStaticData->vocabulary;
}

antlr4::atn::SerializedATNView CINTLexer::getSerializedATN() const {
  return cintlexerLexerStaticData->serializedATN;
}

const atn::ATN& CINTLexer::getATN() const {
  return *cintlexerLexerStaticData->atn;
}




void CINTLexer::initialize() {
  ::antlr4::internal::call_once(cintlexerLexerOnceFlag, cintlexerLexerInitialize);
}
